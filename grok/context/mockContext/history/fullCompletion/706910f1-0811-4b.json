{"id":"706910f1-0811-4b6e-b0df-ab02c5a394ed","object":"chat.completion","created":1741229026,"model":"grok-2-1212","choices":[{"index":0,"message":{"role":"assistant","content":"Here's an expanded example that includes additional functionality such as displaying a confidence bar for each prediction, and allowing the user to select from different pre-trained models available in TensorFlow.js. This code builds upon the previous example, enhancing user interaction and providing more detailed output.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Enhanced Image Classification</title>\n    <style>\n        .prediction {\n            margin-bottom: 10px;\n        }\n        .confidence-bar {\n            width: 200px;\n            height: 10px;\n            background-color: #ddd;\n            border-radius: 5px;\n            margin-top: 5px;\n        }\n        .confidence-fill {\n            height: 10px;\n            background-color: #4CAF50;\n            border-radius: 5px;\n        }\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@latest\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/posenet@latest\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd@latest\"></script>\n</head>\n<body>\n    <h1>Enhanced Image Classification</h1>\n    <select id=\"modelSelect\">\n        <option value=\"mobilenet\">MobileNet</option>\n        <option value=\"posenet\">PoseNet</option>\n        <option value=\"coco-ssd\">COCO-SSD</option>\n    </select>\n    <input type=\"file\" id=\"fileInput\" accept=\"image/*\">\n    <img id=\"img\" src=\"\" style=\"max-width: 300px; max-height: 300px;\">\n    <div id=\"predictions\"></div>\n\n    <script>\n        document.getElementById('fileInput').addEventListener('change', async (e) => {\n            const file = e.target.files[0];\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                document.getElementById('img').src = e.target.result;\n                const img = document.getElementById('img');\n                const modelSelect = document.getElementById('modelSelect');\n                const selectedModel = modelSelect.value;\n                let model;\n\n                switch(selectedModel) {\n                    case 'mobilenet':\n                        model = await mobilenet.load();\n                        break;\n                    case 'posenet':\n                        model = await posenet.load();\n                        break;\n                    case 'coco-ssd':\n                        model = await cocoSsd.load();\n                        break;\n                    default:\n                        console.error('Invalid model selected');\n                        return;\n                }\n\n                const tensor = tf.browser.fromPixels(img).toFloat();\n                const resized = tf.image.resizeBilinear(tensor, [224, 224]);\n                const batched = resized.expandDims(0);\n\n                let predictions;\n                switch(selectedModel) {\n                    case 'mobilenet':\n                        predictions = await model.classify(batched);\n                        break;\n                    case 'posenet':\n                        predictions = await model.estimateSinglePose(batched);\n                        break;\n                    case 'coco-ssd':\n                        predictions = await model.detect(batched);\n                        break;\n                }\n\n                displayPredictions(predictions, selectedModel);\n            };\n            reader.readAsDataURL(file);\n        });\n\n        function displayPredictions(predictions, modelType) {\n            const predictionsDiv = document.getElementById('predictions');\n            predictionsDiv.innerHTML = '';\n\n            if (modelType === 'mobilenet') {\n                predictions.forEach(pred => {\n                    const predictionDiv = document.createElement('div');\n                    predictionDiv.className = 'prediction';\n                    predictionDiv.innerHTML = `${pred.className} (${pred.probability.toFixed(2)})`;\n\n                    const confidenceBar = document.createElement('div');\n                    confidenceBar.className = 'confidence-bar';\n                    const confidenceFill = document.createElement('div');\n                    confidenceFill.className = 'confidence-fill';\n                    confidenceFill.style.width = `${pred.probability * 100}%`;\n                    confidenceBar.appendChild(confidenceFill);\n                    predictionDiv.appendChild(confidenceBar);\n\n                    predictionsDiv.appendChild(predictionDiv);\n                });\n            } else if (modelType === 'posenet') {\n                predictionsDiv.innerHTML = `Pose detected: keypoints=${predictions.keypoints.length}`;\n            } else if (modelType === 'coco-ssd') {\n                predictions.forEach(pred => {\n                    const predictionDiv = document.createElement('div');\n                    predictionDiv.className = 'prediction';\n                    predictionDiv.innerHTML = `${pred.class} (${pred.score.toFixed(2)})`;\n                    predictionsDiv.appendChild(predictionDiv);\n                });\n            }\n        }\n    </script>\n</body>\n</html>\n```\n\nThis enhanced example allows users to select from three different pre-trained models: MobileNet, PoseNet, and COCO-SSD. Each model serves a different purpose:\n\n- **MobileNet**: General image classification.\n- **PoseNet**: Human pose estimation.\n- **COCO-SSD**: Object detection.\n\nThe code includes a simple UI to select the model, upload an image, and display the results with a confidence bar for MobileNet and basic output for PoseNet and COCO-SSD. This provides a more interactive and versatile application for demonstrating TensorFlow.js capabilities in the browser.\n\n@EOF@TensorFlow.js, imageclassification, mobilenet, posenet, coco-ssd, machinelearning, javascript, webapplication, realtimeml, browserml, pre-trainedmodel, imageprocessing, userinteraction, confidencebar, poseestimation, objectdetection","refusal":null},"finish_reason":"stop"}],"usage":{"prompt_tokens":962,"completion_tokens":1152,"reasoning_tokens":0,"total_tokens":2114,"prompt_tokens_details":{"text_tokens":962,"audio_tokens":0,"image_tokens":0,"cached_tokens":0}},"system_fingerprint":"fp_5c0c5bd9d9"}