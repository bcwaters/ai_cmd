{"id":"9f2e8cdf-734a-4ebb-806a-d879460e4718","object":"chat.completion","created":1741229118,"model":"grok-2-1212","choices":[{"index":0,"message":{"role":"assistant","content":"Below is a simple TensorFlow.js example for binary image classification. This code demonstrates how to load an image, process it through a pre-trained model, and output the result. For this example, we'll assume you're using a model trained for binary classification (e.g., cat vs. dog).\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Binary Image Classification</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest\"></script>\n</head>\n<body>\n    <h1>Binary Image Classification</h1>\n    <input type=\"file\" id=\"fileInput\" accept=\"image/*\">\n    <img id=\"img\" style=\"max-width: 300px; max-height: 300px;\">\n    <div id=\"result\"></div>\n\n    <script>\n        async function loadModel() {\n            // Load a pre-trained model for binary classification\n            return await tf.loadLayersModel('path/to/your/model.json');\n        }\n\n        document.getElementById('fileInput').addEventListener('change', async (e) => {\n            const file = e.target.files[0];\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                document.getElementById('img').src = e.target.result;\n                const img = document.getElementById('img');\n                \n                // Wait for the image to load\n                await new Promise((resolve) => img.onload = resolve);\n\n                // Load the model\n                const model = await loadModel();\n\n                // Convert the image to a tensor\n                let tensor = tf.browser.fromPixels(img)\n                    .resizeNearestNeighbor([224, 224]) // Adjust according to your model's input size\n                    .toFloat()\n                    .expandDims();\n\n                // Normalize the tensor if your model expects normalized input\n                tensor = tensor.div(255);\n\n                // Make a prediction\n                const prediction = model.predict(tensor);\n                const result = await prediction.data();\n\n                // Assuming binary classification, result[0] is the probability of class 0, result[1] for class 1\n                const classIndex = result[0] > result[1] ? 0 : 1;\n                const probability = Math.max(...result);\n\n                document.getElementById('result').innerText = `Class: ${classIndex}, Probability: ${probability.toFixed(2)}`;\n            };\n            reader.readAsDataURL(file);\n        });\n    </script>\n</body>\n</html>\n```\n\n**Key Points:**\n\n- Replace `'path/to/your/model.json'` with the actual path to your model.\n- The model input size is set to 224x224 pixels, adjust as necessary.\n- The code assumes the model outputs logits which are converted to probabilities. If your model outputs probabilities directly, you may need to adjust the result handling.\n- This example shows the class with the highest probability and its value.\n\nMake sure to host your model files in a way that they can be accessed by the web application. If you are using a local server, ensure CORS settings are configured correctly to allow loading the model.\n\n@EOF@tensorflowjs, imageclassification, binaryclassification, machinelearning, javascript, webapplication, modelprediction, imageprocessing","refusal":null},"finish_reason":"stop"}],"usage":{"prompt_tokens":1150,"completion_tokens":670,"reasoning_tokens":0,"total_tokens":1820,"prompt_tokens_details":{"text_tokens":1150,"audio_tokens":0,"image_tokens":0,"cached_tokens":0}},"system_fingerprint":"fp_5c0c5bd9d9"}