{"id":"f34917c7-c99d-414b-bdb4-ecd71667459a","object":"chat.completion","created":1741220462,"model":"grok-2-1212","choices":[{"index":0,"message":{"role":"assistant","content":"Here are several code blocks demonstrating various types of neural networks using TensorFlow.js. Each example includes model definition, compilation, training, and prediction functions.\n\n### Simple Feedforward Neural Network\n\n```javascript\nimport * as tf from '@tensorflow/tfjs';\n\n// Define the model architecture\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 10, activation: 'relu', inputShape: [784]}));\nmodel.add(tf.layers.dense({units: 10, activation: 'softmax'}));\n\n// Compile the model\nmodel.compile({optimizer: 'sgd', loss: 'categoricalCrossentropy', metrics: ['accuracy']});\n\n// Train the model\nasync function train(data, labels) {\n    await model.fit(data, labels, {\n        epochs: 100,\n        callbacks: {\n            onEpochEnd: (epoch, logs) => {\n                console.log(`Epoch ${epoch}: loss = ${logs.loss}`);\n            }\n        }\n    });\n}\n\n// Make predictions\nasync function predict(input) {\n    const prediction = await model.predict(input);\n    return prediction;\n}\n```\n\n### Convolutional Neural Network (CNN)\n\n```javascript\nimport * as tf from '@tensorflow/tfjs';\n\n// Define the model architecture\nconst model = tf.sequential();\nmodel.add(tf.layers.conv2d({inputShape: [28, 28, 1], kernelSize: 3, filters: 16, activation: 'relu'}));\nmodel.add(tf.layers.maxPooling2d({poolSize: [2, 2]}));\nmodel.add(tf.layers.conv2d({kernelSize: 3, filters: 32, activation: 'relu'}));\nmodel.add(tf.layers.maxPooling2d({poolSize: [2, 2]}));\nmodel.add(tf.layers.flatten());\nmodel.add(tf.layers.dense({units: 64, activation: 'relu'}));\nmodel.add(tf.layers.dense({units: 10, activation: 'softmax'}));\n\n// Compile the model\nmodel.compile({optimizer: 'adam', loss: 'categoricalCrossentropy', metrics: ['accuracy']});\n\n// Train the model\nasync function train(data, labels) {\n    await model.fit(data, labels, {\n        epochs: 50,\n        batchSize: 32,\n        callbacks: {\n            onEpochEnd: (epoch, logs) => {\n                console.log(`Epoch ${epoch}: loss = ${logs.loss}, accuracy = ${logs.acc}`);\n            }\n        }\n    });\n}\n\n// Make predictions\nasync function predict(input) {\n    const prediction = await model.predict(input);\n    return prediction;\n}\n```\n\n### Recurrent Neural Network (RNN) with LSTM\n\n```javascript\nimport * as tf from '@tensorflow/tfjs';\n\n// Define the model architecture\nconst model = tf.sequential();\nmodel.add(tf.layers.lstm({units: 64, inputShape: [10, 1], returnSequences: true}));\nmodel.add(tf.layers.lstm({units: 32}));\nmodel.add(tf.layers.dense({units: 1}));\n\n// Compile the model\nmodel.compile({optimizer: 'adam', loss: 'meanSquaredError'});\n\n// Train the model\nasync function train(data, labels) {\n    await model.fit(data, labels, {\n        epochs: 50,\n        batchSize: 32,\n        callbacks: {\n            onEpochEnd: (epoch, logs) => {\n                console.log(`Epoch ${epoch}: loss = ${logs.loss}`);\n            }\n        }\n    });\n}\n\n// Make predictions\nasync function predict(input) {\n    const prediction = await model.predict(input);\n    return prediction;\n}\n```\n\nThese code blocks demonstrate how to create, compile, train, and use different types of neural networks (feedforward, convolutional, and recurrent) using TensorFlow.js. Each example includes model definition, compilation, training, and prediction functions.\n\n@EOF@\nTensorFlow.js, neural networks, feedforward, convolutional, recurrent, LSTM, model architecture, training, prediction","refusal":null},"finish_reason":"stop"}],"usage":{"prompt_tokens":866,"completion_tokens":826,"reasoning_tokens":0,"total_tokens":1692,"prompt_tokens_details":{"text_tokens":866,"audio_tokens":0,"image_tokens":0,"cached_tokens":0}},"system_fingerprint":"fp_5c0c5bd9d9"}