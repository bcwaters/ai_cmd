{"id":"2b37b96b-9a87-485b-8b7e-c3f383937bd4","object":"chat.completion","created":1741220546,"model":"grok-2-1212","choices":[{"index":0,"message":{"role":"assistant","content":"Below are five examples of TensorFlow.js code, demonstrating various neural network architectures and functionalities. Each example is a complete and functional piece of code that can be used to understand different aspects of TensorFlow.js.\n\n### Example 1: Simple Linear Regression\n\n```javascript\nimport * as tf from '@tensorflow/tfjs';\n\n// Generate some data\nconst xs = tf.tensor1d([1, 2, 3, 4]);\nconst ys = tf.tensor1d([1, 3, 5, 7]);\n\n// Define the model\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 1, inputShape: [1]}));\n\n// Compile the model\nmodel.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n// Train the model\nasync function train() {\n  await model.fit(xs, ys, {epochs: 100});\n  console.log('Model trained!');\n}\n\n// Make a prediction\nasync function predict(x) {\n  const xs = tf.tensor1d([x]);\n  const ys = await model.predict(xs);\n  console.log(`Prediction for ${x}: ${ys.dataSync()[0]}`);\n}\n\ntrain().then(() => predict(5));\n```\n\n### Example 2: Convolutional Neural Network for Image Classification\n\n```javascript\nimport * as tf from '@tensorflow/tfjs';\n\n// Define the model\nconst model = tf.sequential();\nmodel.add(tf.layers.conv2d({inputShape: [28, 28, 1], kernelSize: 3, filters: 16, activation: 'relu'}));\nmodel.add(tf.layers.maxPooling2d({poolSize: [2, 2]}));\nmodel.add(tf.layers.flatten());\nmodel.add(tf.layers.dense({units: 10, activation: 'softmax'}));\n\n// Compile the model\nmodel.compile({optimizer: 'adam', loss: 'categoricalCrossentropy', metrics: ['accuracy']});\n\n// Dummy data for training\nconst xs = tf.randomNormal([100, 28, 28, 1]);\nconst ys = tf.randomUniform([100, 10], 0, 1);\n\n// Train the model\nasync function train() {\n  await model.fit(xs, ys, {epochs: 5});\n  console.log('Model trained!');\n}\n\ntrain();\n```\n\n### Example 3: Recurrent Neural Network (LSTM) for Sequence Prediction\n\n```javascript\nimport * as tf from '@tensorflow/tfjs';\n\n// Define the model\nconst model = tf.sequential();\nmodel.add(tf.layers.lstm({units: 10, inputShape: [null, 1], returnSequences: true}));\nmodel.add(tf.layers.lstm({units: 10}));\nmodel.add(tf.layers.dense({units: 1}));\n\n// Compile the model\nmodel.compile({optimizer: 'adam', loss: 'meanSquaredError'});\n\n// Dummy data for training\nconst xs = tf.randomNormal([100, 10, 1]);\nconst ys = tf.randomNormal([100, 1]);\n\n// Train the model\nasync function train() {\n  await model.fit(xs, ys, {epochs: 5});\n  console.log('Model trained!');\n}\n\ntrain();\n```\n\n### Example 4: Transfer Learning with MobileNet\n\n```javascript\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nasync function loadAndPredict() {\n  // Load the model\n  const model = await mobilenet.load();\n\n  // Load an image\n  const img = document.getElementById('img');\n  const pixels = tf.browser.fromPixels(img);\n\n  // Classify the image\n  const predictions = await model.classify(pixels);\n  console.log('Predictions: ', predictions);\n}\n\nloadAndPredict();\n```\n\n### Example 5: Custom Layer in TensorFlow.js\n\n```javascript\nimport * as tf from '@tensorflow/tfjs';\n\nclass CustomLayer extends tf.layers.Layer {\n  constructor(config) {\n    super(config);\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  call(inputs) {\n    return tf.tidy(() => {\n      // Custom operation: multiply inputs by 2\n      return tf.mul(inputs, tf.scalar(2));\n    });\n  }\n\n  static get className() {\n    return 'CustomLayer';\n  }\n}\n\ntf.serialization.registerClass(CustomLayer);\n\n// Define the model\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 10, inputShape: [1]}));\nmodel.add(new CustomLayer());\n\n// Compile the model\nmodel.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n// Dummy data for training\nconst xs = tf.randomNormal([100, 1]);\nconst ys = tf.randomNormal([100, 10]);\n\n// Train the model\nasync function train() {\n  await model.fit(xs, ys, {epochs: 5});\n  console.log('Model trained!');\n}\n\ntrain();\n```\n\nThese examples cover a range of applications from simple linear regression to more complex models like CNNs and RNNs, as well as transfer learning and custom layers. Each example can be run independently to explore different TensorFlow.js capabilities.@EOF@[TensorFlow.js, neural networks, linear regression, convolutional neural networks, recurrent neural networks, LSTM, transfer learning, MobileNet, custom layers, image classification, sequence prediction]","refusal":null},"finish_reason":"stop"}],"usage":{"prompt_tokens":458,"completion_tokens":1127,"reasoning_tokens":0,"total_tokens":1585,"prompt_tokens_details":{"text_tokens":458,"audio_tokens":0,"image_tokens":0,"cached_tokens":0}},"system_fingerprint":"fp_5c0c5bd9d9"}