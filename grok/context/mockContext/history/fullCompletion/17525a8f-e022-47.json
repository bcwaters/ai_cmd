{"id":"17525a8f-e022-47be-80fb-a35967e7e402","object":"chat.completion","created":1741110364,"model":"grok-2-1212","choices":[{"index":0,"message":{"role":"assistant","content":"# NGINX Configuration with ngx_http_js_module\n\nBelow is a complete configuration file for an NGINX server with the `ngx_http_js_module` enabled. This configuration sets up a basic server that uses JavaScript to handle requests.\n\n```nginx\n# Define the user and group that NGINX will run as\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 768;\n    # multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n\n    # Include MIME types\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # Logging settings\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    # Enable gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    # Load the ngx_http_js_module\n    js_path /etc/nginx/njs/;\n    js_import main from main.js;\n\n    server {\n        listen 80;\n        server_name example.com;\n\n        # Use JavaScript for handling requests\n        location / {\n            js_content main.hello;\n        }\n\n        # Example of using JavaScript for subrequests\n        location /subrequest {\n            js_content main.subrequest;\n        }\n    }\n}\n```\n\nIn this configuration, the `js_path` and `js_import` directives are used to load and import JavaScript code. The `js_content` directive within the `location` blocks specifies that the request should be handled by a JavaScript function defined in `main.js`.\n\nHere is an example of what `main.js` might look like:\n\n```javascript\nfunction hello(r) {\n    r.return(200, \"Hello, World!\");\n}\n\nfunction subrequest(r) {\n    r.subrequest('/backend', function(res) {\n        r.return(res.status, res.responseBody);\n    });\n}\n\nexport default {hello, subrequest};\n```\n\nThis JavaScript file defines two functions: `hello` which returns a simple \"Hello, World!\" message, and `subrequest` which demonstrates how to make a subrequest to another endpoint.\n\n@EOF@\n[NGINX, ngx_http_js_module, JavaScript, configuration, js_path, js_import, js_content, subrequest]","refusal":null},"finish_reason":"stop"}],"usage":{"prompt_tokens":299,"completion_tokens":534,"total_tokens":833,"prompt_tokens_details":{"text_tokens":299,"audio_tokens":0,"image_tokens":0,"cached_tokens":0}},"system_fingerprint":"fp_5c0c5bd9d9"}